# Task 2: Data Preprocessing for ML
# employees.csv file generated by AI

# Goals
# Handle Missing & Inconsistent Data
# I used the SimpleImputer to fill in the missing data

# Encode categorical variables
# I used the .map() for better controlled in the rankings instead of the LabelEncoder.

# Scale features using StandardScaler or MinMaxScaler
# I used the StandardScaler for scaling the "Age" & "Salary" due to them having big differences

import pandas as pd
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

a = pd.read_csv("employees.csv")
print(a)

model = SimpleImputer(strategy="median")
a[["Age"]] = model.fit_transform(a[["Age"]])

model2 = SimpleImputer(strategy="most_frequent")
a[["Gender"]] = model2.fit_transform(a[["Gender"]])

a[["Salary"]] = model2.fit_transform(a[["Salary"]])

a["Gender"] = a["Gender"].str.strip()
a["Gender"] = a["Gender"].str.lower()

a["Gender"] = a["Gender"].replace({"female": "F",
                                   "f": "F",
                                    "male": "M",
                                    "m": "M"})

a["City"] = a["City"].str.lower()
a["City"] = a["City"].str.replace(" ", "", regex=False)

a[["City"]] = model2.fit_transform(a[["City"]])

a["City"] = a["City"].replace({
    "newyork": "NY",
    "ny": "NY",
    "la": "LA",
    "losangeles": "LA",
    "sanfrancisco": "SF",
    "sf": "SF",
    "sanfran": "SF"
})

a["Experience"] = a["Experience"].str.lower()
a["Experience"] = a["Experience"].str.replace(" ", "", regex=False)

a["Experience"] = a["Experience"].replace({"mid": "Intermediate"})

a[["Experience"]] = model2.fit_transform(a[["Experience"]])

a["Experience"] = a["Experience"].str.title()

encoder = LabelEncoder()

experience_map = {
    "Junior": 0,
    "Intermediate": 1,
    "Senior": 2
}

a["Experience"] = a["Experience"].map(experience_map)

a = pd.get_dummies(a, columns=["Gender", "City"], dtype=int)

scaler = StandardScaler()
a[["Age_scaled", "Salary_scaled"]] = scaler.fit_transform(a[["Age", "Salary"]])

pd.set_option("display.max_rows", None)
pd.set_option("display.max_columns", None)

print(a)